// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sistema_taxis.Models;

namespace sistema_taxis.Migrations
{
    [DbContext(typeof(SistemaTaxisContext))]
    [Migration("20200625213504_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("sistema_taxis.Models.Chofer", b =>
                {
                    b.Property<Guid>("ChoferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("Celular")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Curp")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<byte[]>("Ine")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Licencia")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<long?>("Telefono")
                        .HasColumnType("bigint");

                    b.Property<int>("TipoSangreId")
                        .HasColumnType("int");

                    b.HasKey("ChoferId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TipoSangreId");

                    b.ToTable("Chofer");
                });

            modelBuilder.Entity("sistema_taxis.Models.ChoferUnidad", b =>
                {
                    b.Property<Guid>("ChoferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnidadId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChoferId", "UnidadId");

                    b.HasIndex("UnidadId");

                    b.ToTable("ChoferUnidad");
                });

            modelBuilder.Entity("sistema_taxis.Models.Pago", b =>
                {
                    b.Property<Guid>("PagoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("money");

                    b.Property<Guid>("ChoferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime");

                    b.HasKey("PagoId");

                    b.HasIndex("ChoferId");

                    b.ToTable("Pago");
                });

            modelBuilder.Entity("sistema_taxis.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("StatusId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("sistema_taxis.Models.TipoSangre", b =>
                {
                    b.Property<int>("TipoSangreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.HasKey("TipoSangreId");

                    b.ToTable("TipoSangre");
                });

            modelBuilder.Entity("sistema_taxis.Models.Unidad", b =>
                {
                    b.Property<Guid>("UnidadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChoferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FinSeguro")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("InicioSeguro")
                        .HasColumnType("datetime");

                    b.Property<string>("Linea")
                        .IsRequired()
                        .HasColumnType("nvarchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(45)")
                        .HasMaxLength(45);

                    b.Property<int>("Modelo")
                        .HasColumnType("int");

                    b.Property<string>("Nss")
                        .IsRequired()
                        .HasColumnType("nvarchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("NumMotor")
                        .IsRequired()
                        .HasColumnType("nvarchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("NumSerie")
                        .IsRequired()
                        .HasColumnType("nvarchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("NumUnidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(45)")
                        .HasMaxLength(45);

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Vehiculo")
                        .IsRequired()
                        .HasColumnType("nvarchar(45)")
                        .HasMaxLength(45);

                    b.HasKey("UnidadId");

                    b.HasIndex("ChoferId");

                    b.HasIndex("StatusId");

                    b.ToTable("Unidad");
                });

            modelBuilder.Entity("sistema_taxis.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("sistema_taxis.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("sistema_taxis.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sistema_taxis.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("sistema_taxis.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sistema_taxis.Models.Chofer", b =>
                {
                    b.HasOne("sistema_taxis.Models.Status", "Status")
                        .WithMany("Chofer")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Chofer_Status")
                        .IsRequired();

                    b.HasOne("sistema_taxis.Models.TipoSangre", "TipoSangre")
                        .WithMany("Chofer")
                        .HasForeignKey("TipoSangreId")
                        .HasConstraintName("FK_Chofer_TipoSangre")
                        .IsRequired();
                });

            modelBuilder.Entity("sistema_taxis.Models.ChoferUnidad", b =>
                {
                    b.HasOne("sistema_taxis.Models.Chofer", "Chofer")
                        .WithMany("ChoferUnidad")
                        .HasForeignKey("ChoferId")
                        .HasConstraintName("Fk_ChoferUnidad_Chofer")
                        .IsRequired();

                    b.HasOne("sistema_taxis.Models.Unidad", "Unidad")
                        .WithMany("ChoferUnidad")
                        .HasForeignKey("UnidadId")
                        .HasConstraintName("Fk_ChoferUnidad_Unidad")
                        .IsRequired();
                });

            modelBuilder.Entity("sistema_taxis.Models.Pago", b =>
                {
                    b.HasOne("sistema_taxis.Models.Chofer", "Chofer")
                        .WithMany("Pago")
                        .HasForeignKey("ChoferId")
                        .HasConstraintName("FK_Pago_Chofer")
                        .IsRequired();
                });

            modelBuilder.Entity("sistema_taxis.Models.Unidad", b =>
                {
                    b.HasOne("sistema_taxis.Models.Chofer", "Chofer")
                        .WithMany("Unidad")
                        .HasForeignKey("ChoferId")
                        .HasConstraintName("Fk_Unidad_Chofer")
                        .IsRequired();

                    b.HasOne("sistema_taxis.Models.Status", "Status")
                        .WithMany("Unidad")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Unidad_Status")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
